name: Build, test and publish MAUI application
on:
    workflow_call:
        inputs:
            application-name:
              required: true
              type: string
            package-name:
                required: true
                type: string
            path:
              required: true
              type: string
    
        secrets:
            service-account-json:
                required: false

jobs:
    build-and-test:
        name: Build and test
        if: ${{ !startsWith(github.event.ref, 'refs/tags/v') }}
        strategy:
            matrix:
                include:
                    - os: windows-latest
                      configuration: Debug
                    - os: macos-13
                      configuration: Debug
                    #-   os: ubuntu-latest - Workload ID maui isn't supported on this platform.
                    #    configuration: Debug
        
        runs-on: ${{ matrix.os }}
        env:
            TF_BUILD: true
        steps:
            - name: Getting code
              uses: actions/checkout@v3

            - name: Cache Nuget Packages
              uses: actions/cache@v3
              with:
                  path: ~/.nuget/packages
                  key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj*') }}
                  restore-keys: |
                      ${{ runner.os }}-nuget-
    
            - name: Install workloads
              run: dotnet workload install maui

            - name: Install Tizen workload on macOS / Linux
              if: runner.os != 'Windows'
              run: curl -sSL https://raw.githubusercontent.com/Samsung/Tizen.NET/main/workload/scripts/workload-install.sh | sudo bash

            - name: Install Tizen workload on Windows
              if: runner.os == 'Windows'
              run: |
                  Invoke-WebRequest 'https://raw.githubusercontent.com/Samsung/Tizen.NET/main/workload/scripts/workload-install.ps1' -OutFile 'workload-install.ps1'
                  ./workload-install.ps1

            - name: Select latest Xcode on macOS / Linux
              if: runner.os != 'Windows'
              uses: maxim-lobanov/setup-xcode@v1
              with:
                  xcode-version: latest

            - name: Build using dotnet
              run: dotnet build
                  --configuration ${{ matrix.configuration }}
                  --nologo

            - name: Run tests
              run: dotnet test
                  --configuration ${{ matrix.configuration }}
                  --nologo
    
    create-github-release:
        name: Create Github Release
        #needs: build-and-test
        runs-on: ubuntu-latest
        continue-on-error: true
        if: startsWith(github.event.ref, 'refs/tags/v')
        outputs:
            release_id: ${{ steps.create_release.outputs.result }}
        steps:
            - name: Create Release
              id: create_release
              uses: actions/github-script@v6
              with:
                  result-encoding: string
                  script: |
                      const result = await github.rest.repos.createRelease({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        tag_name: context.ref.replace('refs/tags/', ''),
                        prerelease: true,
                        generate_release_notes: true,
                      })
                      
                      return result.data.id
                  
    publish-android:
        name: Create Android artifacts
        #needs: build-and-test
        runs-on: macos-latest
        continue-on-error: true
        if: startsWith(github.event.ref, 'refs/tags/v')
        steps:
            - name: Getting code
              uses: actions/checkout@v3

            - name: Cache Nuget Packages
              uses: actions/cache@v3
              with:
                  path: ~/.nuget/packages
                  key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj*') }}
                  restore-keys: |
                      ${{ runner.os }}-nuget-

            - name: Install workloads
              run: dotnet workload install maui

            - name: Publish
              run: dotnet publish
                  ${{ inputs.path }}
                  --framework:net7.0-android
                  --configuration Release
                  --nologo

            - name: Upload artifacts
              uses: actions/upload-artifact@v3
              with:
                  name: android
                  path: ${{ inputs.path }}/bin/Release/net7.0-android/publish/
    
    publish-android-to-github-releases:
        name: Publish to Github Releases
        needs: [create-github-release, publish-android]
        runs-on: ubuntu-latest
        continue-on-error: true
        steps:
            - uses: actions/download-artifact@v3
              with:
                  name: android

            - name: Upload .apk Asset
              uses: actions/github-script@v6
              with:
                  result-encoding: string
                  script: |
                      const path = require('path');
                      const fs = require('fs/promises');
                    
                      const asset_path = '${{ inputs.package-name }}-Signed.apk'
                      const data = await fs.readFile(asset_path);
                    
                      await github.rest.repos.uploadReleaseAsset({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        release_id: ${{ needs.create-github-release.outputs.release_id }},
                        name: path.basename(asset_path),
                        data: data,
                      })
    
    publish-android-to-google-play:
        name: Publish to Google Play
        needs: publish-android
        environment: production
        continue-on-error: true
        runs-on: ubuntu-latest
        steps:
            - uses: actions/download-artifact@v3
              with:
                  name: android
                  
            - name: Deploy
              uses: r0adkll/upload-google-play@v1
              with:
                  serviceAccountJsonPlainText: ${{ secrets.service-account-json }}
                  packageName: ${{ inputs.package-name }}
                  releaseFiles: ${{ inputs.package-name }}-Signed.aab
                  track: internal
    
#    publish-ios:
#        name: Create iOS artifacts
#        needs: build-and-test
#        runs-on: macos-latest
#        continue-on-error: true
#        if: startsWith(github.event.ref, 'refs/tags/v')
#        steps:
#            -   name: Getting code
#                uses: actions/checkout@v3
#
#            -   name: Cache Nuget Packages
#                uses: actions/cache@v3
#                with:
#                    path: ~/.nuget/packages
#                    key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj*') }}
#                    restore-keys: |
#                        ${{ runner.os }}-nuget-
#
#            -   name: Install workloads
#                run: dotnet workload install maui
#
#            -   name: Import certificates
#                uses: apple-actions/import-codesign-certs@v2
#                with:
#                    p12-file-base64: ${{ secrets.CERTIFICATES_P12_BASE64 }}
#                    p12-password: ${{ secrets.CERTIFICATES_P12_PASSWORD }}
#
#            -   uses: apple-actions/download-provisioning-profiles@v1
#                with:
#                    bundle-id: ${{ inputs.package-name }}
#                    issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
#                    api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
#                    api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}
#
#            -   name: Publish
#                run: dotnet publish
#                    --framework:net7.0-ios
#                    --configuration Release
#                    --nologo
#                    /p:ArchiveOnBuild=true
#                    /p:RuntimeIdentifier=ios-arm64
#                    /p:CodesignKey="${{ vars.CODESIGN_KEY }}"
#                    /p:CodesignProvision="${{ vars.CODESIGN_PROVISION }}"
#
#            -   name: Upload artifacts
#                uses: actions/upload-artifact@v3
#                with:
#                    name: ios
#                    path: ${{ inputs.path }}/bin/Release/net7.0-ios/publish/
#    
#    publish-ios-to-github-releases:
#        name: Publish to Github Releases
#        needs: [ create-github-release, publish-ios ]
#        runs-on: ubuntu-latest
#        continue-on-error: true
#        steps:
#            -   uses: actions/download-artifact@v3
#                with:
#                    name: ios
#
#            -   name: Upload .ipa Asset
#                uses: actions/upload-release-asset@v1
#                env:
#                    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#                with:
#                    upload_url: ${{ needs.create-github-release.outputs.upload_url }}
#                    asset_path: ParkingManager.ipa
#                    asset_name: ParkingManager.ipa
#                    asset_content_type: application/octet-stream
#    
#    publish-ios-to-testflight:
#        name: Publish to TestFlight
#        needs: publish-ios
#        runs-on: macos-latest
#        continue-on-error: true
#        steps:
#            -   uses: actions/download-artifact@v3
#                with:
#                    name: ios
#
#            -   name: Upload .ipa Asset
#                uses: Apple-Actions/upload-testflight-build@master
#                with:
#                    app-path: ParkingManager.ipa
#                    issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
#                    api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
#                    api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}
#    
#    publish-ios-to-app-store:
#        name: Publish to App Store
#        needs: publish-ios
#        environment: production
#        continue-on-error: true
#        runs-on: macos-latest
#        steps:
#            -   uses: actions/download-artifact@v3
#                with:
#                    name: ios
#
#            -   name: Upload app to App Store Connect
#                run: xcrun altool
#                    --upload-app
#                    -t ios
#                    -f "ParkingManager.ipa"
#                    -u "${{ secrets.APP_STORE_CONNECT_USERNAME }}"
#                    -p "${{ secrets.APP_STORE_CONNECT_PASSWORD }}"